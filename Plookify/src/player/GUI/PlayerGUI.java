/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package player.GUI;

import java.awt.Frame;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.JTable;
import javax.swing.Timer;
import playlist.PlaylistLogic;

/**
 *
 * @author Fionnuala
 */
public class PlayerGUI extends javax.swing.JPanel {

    public static Frame parent;
    public static Timer timer, timerB;
    /**
     * Creates new form PlayerGUI
     */
    int sliderValue = 0;
    static int song;
    static String artist;
    static String title;
    static int minutes, seconds;

    public PlayerGUI() {
        initComponents();
        timer = new Timer(1000, forW);
        slider.setValue(0);
        startTime.setText("00:00");
        endTime.setText("00:00");
        songText.setText("-");
        artistText.setText("-");

    }

    public void setParentFrame(Frame f) {
        parent = f;
    }

    public static boolean setSong() {
        JTable NPtable = player.logic.Player.getSong();
        if (NPtable.getRowCount() == 0) {
            timer.stop();
            endTime.setText("00:00");
            songText.setText("-");
            artistText.setText("-");
            togglePlay.setText("►");
            try{parent.setTitle("Plookify");}catch(Exception e){}
            togglePlay.setSelected(false);
            return false;
        }
        song = (int) NPtable.getValueAt(0, 2);
        artist = (String) NPtable.getValueAt(0, 1);
        title = (String) NPtable.getValueAt(0, 0);
        slider.setMaximum(song);
        minutes = player.logic.Player.min(song);
        seconds = player.logic.Player.sec(song);
        //try to set the frame title with the song name and artist

        try {

            parent.setTitle(title + " - " + artist + " - Plookify");

        } catch (Exception e) {
        }
        songText.setText(title);
        artistText.setText(artist);
        slider.setMinimum(0);
        endTime.setText(player.logic.Player.twoDigitString(minutes) + ":" + player.logic.Player.twoDigitString(seconds));

        return true;
    }
    ActionListener forW = new ActionListener() {
        public void actionPerformed(ActionEvent actionEvent) {

            int val = slider.getValue();
            if (val >= song) {
                slider.setValue(0);
                startTime.setText("00:00");
                JTable NPtable = player.logic.Player.getSong();
                int trackID = (int) NPtable.getValueAt(0, 3);
                player.logic.SaveNowPlaying.deleteS(trackID);
                boolean state = setSong();
                if (!state) {
                    songText.setText("-");
                    artistText.setText("-");
                    try {
                        parent.setTitle("Plookify");
                    } catch (Exception e) {
                    }
                }
                nowPlayingGUI.display();
                return;
            }

            slider.setValue(++val);
            if (val < 60) {
                startTime.setText("00:" + player.logic.Player.twoDigitString(val++));
            } else if (val < 120) {
                startTime.setText("01:" + player.logic.Player.twoDigitString(val++ - 60));
            } else if (val < 180) {
                startTime.setText("02:" + player.logic.Player.twoDigitString(val++ - 120));
            } else if (val < 240) {
                startTime.setText("03:" + player.logic.Player.twoDigitString(val++ - 180));
            } else {
                startTime.setText("04:" + player.logic.Player.twoDigitString(val++ - 240));
            }

        }
    };

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        slider = new javax.swing.JSlider();
        togglePlay = new javax.swing.JToggleButton();
        startTime = new javax.swing.JLabel();
        endTime = new javax.swing.JLabel();
        forward = new javax.swing.JToggleButton();
        restart = new javax.swing.JButton();
        artistText = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        songText = new javax.swing.JLabel();
        next = new javax.swing.JButton();

        setBackground(new java.awt.Color(0, 51, 51));

        slider.setBackground(new java.awt.Color(0, 102, 102));
        slider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                sliderStateChanged(evt);
            }
        });
        slider.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                sliderMouseDragged(evt);
            }
        });

        togglePlay.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        togglePlay.setText("►");
        togglePlay.setToolTipText("Play/Pause");
        togglePlay.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                togglePlayActionPerformed(evt);
            }
        });

        startTime.setForeground(new java.awt.Color(204, 204, 255));
        startTime.setText("0");

        endTime.setForeground(new java.awt.Color(204, 204, 255));
        endTime.setText("0");

        forward.setFont(new java.awt.Font("Dialog", 0, 15)); // NOI18N
        forward.setText("►►");
        forward.setToolTipText("Fast-forward");
        forward.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                forwardActionPerformed(evt);
            }
        });

        restart.setFont(new java.awt.Font("Dialog", 0, 15)); // NOI18N
        restart.setText("◄");
        restart.setToolTipText("Restart");
        restart.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                restartActionPerformed(evt);
            }
        });

        artistText.setForeground(new java.awt.Color(204, 204, 255));
        artistText.setText("jLabel2");
        artistText.setMaximumSize(new java.awt.Dimension(120, 14));

        jLabel1.setForeground(new java.awt.Color(204, 204, 255));
        jLabel1.setText("Song:");

        jLabel2.setForeground(new java.awt.Color(204, 204, 255));
        jLabel2.setText("Artist:");

        songText.setForeground(new java.awt.Color(204, 204, 255));
        songText.setText("jLabel2");
        songText.setMaximumSize(new java.awt.Dimension(120, 14));

        next.setFont(new java.awt.Font("Dialog", 0, 15)); // NOI18N
        next.setText("►l");
        next.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nextActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(slider, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(startTime)
                        .addGap(82, 82, 82)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, 51, Short.MAX_VALUE)
                            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(songText, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(artistText, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(72, 72, 72)
                        .addComponent(restart, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(togglePlay, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(forward)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(next)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 290, Short.MAX_VALUE)
                        .addComponent(endTime)
                        .addGap(21, 21, 21))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(slider, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(startTime)
                                .addComponent(jLabel1)
                                .addComponent(songText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(artistText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel2)))
                        .addComponent(endTime)
                        .addGroup(layout.createSequentialGroup()
                            .addGap(2, 2, 2)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(restart, javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(togglePlay, javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(forward, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                    .addComponent(next, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {forward, restart, togglePlay});

    }// </editor-fold>//GEN-END:initComponents

    private void togglePlayActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_togglePlayActionPerformed
        if (timer.isRunning()) {
            timer.stop();
            togglePlay.setText("►");
        } else {
            boolean state = setSong();
            if (state) {
                timer.start();
                togglePlay.setText("▮▮");

            } else {
                PlaylistLogic.dialog("Now Playing is empty.");
                songText.setText("-");
                artistText.setText("-");
                parent.setTitle("Plookify");
                togglePlay.setSelected(false);
            }
        }
    }//GEN-LAST:event_togglePlayActionPerformed

    private void sliderMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_sliderMouseDragged
        int val = slider.getValue();
        if (val < 60) {
            startTime.setText("00:" + player.logic.Player.twoDigitString(val++));
        } else if (val < 120) {
            startTime.setText("01:" + player.logic.Player.twoDigitString(val++ - 60));
        } else if (val < 180) {
            startTime.setText("02:" + player.logic.Player.twoDigitString(val++ - 120));
        } else if (val < 240) {
            startTime.setText("03:" + player.logic.Player.twoDigitString(val++ - 180));
        } else {
            startTime.setText("04:" + player.logic.Player.twoDigitString(val++ - 240));
        }
    }//GEN-LAST:event_sliderMouseDragged

    private void sliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_sliderStateChanged
        int val = slider.getValue();
        if (val < 60) {
            startTime.setText("00:" + player.logic.Player.twoDigitString(val++));
        } else if (val < 120) {
            startTime.setText("01:" + player.logic.Player.twoDigitString(val++ - 60));
        } else if (val < 180) {
            startTime.setText("02:" + player.logic.Player.twoDigitString(val++ - 120));
        } else if (val < 240) {
            startTime.setText("03:" + player.logic.Player.twoDigitString(val++ - 180));
        } else {
            startTime.setText("04:" + player.logic.Player.twoDigitString(val++ - 240));
        }
    }//GEN-LAST:event_sliderStateChanged

    private void forwardActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_forwardActionPerformed
        if (forward.isSelected()) {
            timer.setDelay(100);
        } else {
            timer.setDelay(1000);
        }
    }//GEN-LAST:event_forwardActionPerformed

    private void restartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_restartActionPerformed
        slider.setValue(0);
        startTime.setText("00:00");
    }//GEN-LAST:event_restartActionPerformed

    private void nextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nextActionPerformed
        JTable NPtable = player.logic.Player.getSong();
        boolean state = setSong();
        if (state) {

            int trackID = (int) NPtable.getValueAt(0, 3);
            player.logic.SaveNowPlaying.deleteS(trackID);
            slider.setValue(0);
            startTime.setText("00:00");
            setSong();
        } else {
            songText.setText("-");
            artistText.setText("-");
            parent.setTitle("Plookify");
            try {

            } catch (Exception e) {
            }
        }

        nowPlayingGUI.display();
    }//GEN-LAST:event_nextActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private static javax.swing.JLabel artistText;
    private static javax.swing.JLabel endTime;
    private javax.swing.JToggleButton forward;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private static javax.swing.JButton next;
    private javax.swing.JButton restart;
    public static javax.swing.JSlider slider;
    private static javax.swing.JLabel songText;
    private static javax.swing.JLabel startTime;
    public static javax.swing.JToggleButton togglePlay;
    // End of variables declaration//GEN-END:variables
}
