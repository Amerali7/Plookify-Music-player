package playlist;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import javax.swing.JFrame;
import java.util.ArrayList;
import javax.swing.DefaultListModel;
import javax.swing.table.*;
import javax.swing.*;

/**
 *
 * @author David
 */
public class PlaylistGUI extends javax.swing.JFrame {

    //currently logged in user
    Account thisUser;

    Playlist selectedPlaylist;
    Track selectedTrack;
    Boolean hasSearched = false;
    Playlist[] lstPlist;
    Track[] tblTrax;
    //model for playlist list and playlist tracks table
    DefaultTableModel trackmodel = new DefaultTableModel();
    DefaultListModel playlistsModel = new DefaultListModel();

    /**
     * Creates new form mainGUI
     */
    public PlaylistGUI() {
        initComponents();
        //get current user
        thisUser = login.doLogin();

        if (null == thisUser) {
            System.exit(1);
        }

        thisUser.playlists = PlaylistLogic.getPlaylistsByAccID(thisUser.getAccountID());
        thisUser.friends = PlaylistLogic.determineFriends(thisUser);

        if (thisUser.playlists != null) {
            lstPlist = new Playlist[thisUser.playlists.size()];
        }

        refreshPlaylistsList();
        updateLabels();

        this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

        lstPlaylists.setModel(playlistsModel);

        //set up playlist tracks table
        tblplaylistTracks.setModel(trackmodel);
        //add columns
        //index is will be a hidden column to get the index of a selected track
        //  when it is clicked
        trackmodel.addColumn("index");
        trackmodel.addColumn("Title");
        trackmodel.addColumn("Artist");
        trackmodel.addColumn("Album");
        trackmodel.addColumn("Genre");
        trackmodel.addColumn("Time");
        //remove the index column from the table (it stays on the table model though)
        tblplaylistTracks.removeColumn(tblplaylistTracks.getColumnModel().getColumn(0));
        tblplaylistTracks.setFillsViewportHeight(true);
        //add the rightclick popup listener to the table
        MouseListener popupListener = new RightClickPopupListener();
        tblplaylistTracks.addMouseListener(popupListener);

        //select the first playlist in the playlist list just so something is selected
        try {
            lstPlaylists.setSelectedIndex(0);
        } catch (Exception e) {
            //nothing to select so nevermind
        }
        pack();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        popupTrackSelectedFromPlaylist = new javax.swing.JPopupMenu();
        miAddTrackToNowPlaying = new javax.swing.JMenuItem();
        miDeleteTrackFromPlaylist = new javax.swing.JMenuItem();
        popupTrackSelectedFromSearchResults = new javax.swing.JPopupMenu();
        menuAddTrackToPlaylist = new javax.swing.JMenu();
        miAddTrackToNowPlayingFromSearch = new javax.swing.JMenuItem();
        top = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        txtSearchArtist = new javax.swing.JTextField();
        logOut = new javax.swing.JButton();
        btnSearchByArtist = new javax.swing.JButton();
        player = new javax.swing.JPanel();
        playlistPanel = new javax.swing.JPanel();
        playlist = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        lstPlaylists = new javax.swing.JList();
        lblPlaylists = new javax.swing.JLabel();
        btnNewPlaylist = new javax.swing.JButton();
        btnRenamePlaylist = new javax.swing.JButton();
        btnDeletePlaylist = new javax.swing.JButton();
        tgglbtnChangePlaylistType = new javax.swing.JToggleButton();
        btnPlaySelectedPlaylist = new javax.swing.JButton();
        lblWhosPlaylist = new javax.swing.JLabel();
        lblPlaylistCountAndTime = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        scroll = new javax.swing.JScrollPane();
        tblplaylistTracks = new javax.swing.JTable();
        nowPlaying = new javax.swing.JPanel();
        friends = new javax.swing.JPanel();

        miAddTrackToNowPlaying.setText("Add to Now Playing");
        miAddTrackToNowPlaying.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miAddTrackToNowPlayingActionPerformed(evt);
            }
        });
        popupTrackSelectedFromPlaylist.add(miAddTrackToNowPlaying);

        miDeleteTrackFromPlaylist.setText("Remove from playlist");
        miDeleteTrackFromPlaylist.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miDeleteTrackFromPlaylistActionPerformed(evt);
            }
        });
        popupTrackSelectedFromPlaylist.add(miDeleteTrackFromPlaylist);

        menuAddTrackToPlaylist.setText("Add to playlist...");
        popupTrackSelectedFromSearchResults.add(menuAddTrackToPlaylist);

        miAddTrackToNowPlayingFromSearch.setText("Add to Now Playing");
        miAddTrackToNowPlayingFromSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miAddTrackToNowPlayingFromSearchActionPerformed(evt);
            }
        });
        popupTrackSelectedFromSearchResults.add(miAddTrackToNowPlayingFromSearch);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setName("mainFrame"); // NOI18N

        top.setBackground(new java.awt.Color(0, 51, 51));

        jLabel1.setFont(new java.awt.Font("Gill Sans MT", 0, 36)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Plookify");

        txtSearchArtist.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        txtSearchArtist.setForeground(new java.awt.Color(102, 102, 102));
        txtSearchArtist.setText("search artist...");
        txtSearchArtist.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtSearchArtistFocusGained(evt);
            }
        });
        txtSearchArtist.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtSearchArtistActionPerformed(evt);
            }
        });

        logOut.setText("Change user");
        logOut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                logOutActionPerformed(evt);
            }
        });

        btnSearchByArtist.setText("Search");
        btnSearchByArtist.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchByArtistActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout topLayout = new javax.swing.GroupLayout(top);
        top.setLayout(topLayout);
        topLayout.setHorizontalGroup(
            topLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(topLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(6, 6, 6)
                .addComponent(txtSearchArtist, javax.swing.GroupLayout.PREFERRED_SIZE, 359, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnSearchByArtist)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(logOut)
                .addContainerGap())
        );
        topLayout.setVerticalGroup(
            topLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(topLayout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(12, 12, 12))
            .addGroup(topLayout.createSequentialGroup()
                .addGroup(topLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(topLayout.createSequentialGroup()
                        .addGap(40, 40, 40)
                        .addGroup(topLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnSearchByArtist, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(txtSearchArtist, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(topLayout.createSequentialGroup()
                        .addGap(12, 12, 12)
                        .addComponent(logOut, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        topLayout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {btnSearchByArtist, txtSearchArtist});

        player.setBackground(new java.awt.Color(0, 51, 51));

        javax.swing.GroupLayout playerLayout = new javax.swing.GroupLayout(player);
        player.setLayout(playerLayout);
        playerLayout.setHorizontalGroup(
            playerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1250, Short.MAX_VALUE)
        );
        playerLayout.setVerticalGroup(
            playerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 73, Short.MAX_VALUE)
        );

        playlist.setBackground(new java.awt.Color(0, 102, 102));

        lstPlaylists.setBackground(new java.awt.Color(0, 102, 102));
        lstPlaylists.setFont(new java.awt.Font("Gill Sans Nova Light", 0, 13)); // NOI18N
        lstPlaylists.setForeground(new java.awt.Color(255, 255, 255));
        lstPlaylists.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        lstPlaylists.setMaximumSize(new java.awt.Dimension(169, 378));
        lstPlaylists.setSelectionBackground(new java.awt.Color(0, 51, 51));
        lstPlaylists.setSelectionForeground(new java.awt.Color(255, 255, 255));
        lstPlaylists.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lstPlaylistsMouseClicked(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                lstPlaylistsMousePressed(evt);
            }
        });
        lstPlaylists.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                lstPlaylistsValueChanged(evt);
            }
        });
        jScrollPane2.setViewportView(lstPlaylists);

        lblPlaylists.setFont(new java.awt.Font("Gill Sans Nova", 0, 17)); // NOI18N
        lblPlaylists.setForeground(new java.awt.Color(255, 255, 255));
        lblPlaylists.setText("Playlists");

        btnNewPlaylist.setText("New");
        btnNewPlaylist.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNewPlaylistActionPerformed(evt);
            }
        });

        btnRenamePlaylist.setText("Rename");
        btnRenamePlaylist.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRenamePlaylistActionPerformed(evt);
            }
        });

        btnDeletePlaylist.setText("Delete");
        btnDeletePlaylist.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeletePlaylistActionPerformed(evt);
            }
        });

        tgglbtnChangePlaylistType.setText("Private");
        tgglbtnChangePlaylistType.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tgglbtnChangePlaylistTypeActionPerformed(evt);
            }
        });

        btnPlaySelectedPlaylist.setText("Play");
        btnPlaySelectedPlaylist.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPlaySelectedPlaylistActionPerformed(evt);
            }
        });

        lblWhosPlaylist.setFont(new java.awt.Font("Gill Sans MT", 0, 14)); // NOI18N
        lblWhosPlaylist.setForeground(new java.awt.Color(255, 255, 255));
        lblWhosPlaylist.setText("#playlist owner");

        lblPlaylistCountAndTime.setFont(new java.awt.Font("Gill Sans MT", 0, 14)); // NOI18N
        lblPlaylistCountAndTime.setForeground(new java.awt.Color(255, 255, 255));
        lblPlaylistCountAndTime.setText("#tracks and time");

        javax.swing.GroupLayout playlistLayout = new javax.swing.GroupLayout(playlist);
        playlist.setLayout(playlistLayout);
        playlistLayout.setHorizontalGroup(
            playlistLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, playlistLayout.createSequentialGroup()
                .addGap(0, 1, Short.MAX_VALUE)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 169, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(playlistLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(playlistLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(playlistLayout.createSequentialGroup()
                        .addComponent(lblPlaylistCountAndTime)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(playlistLayout.createSequentialGroup()
                        .addGroup(playlistLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnPlaySelectedPlaylist, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(playlistLayout.createSequentialGroup()
                                .addComponent(btnNewPlaylist, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnRenamePlaylist, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(playlistLayout.createSequentialGroup()
                                .addComponent(tgglbtnChangePlaylistType, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnDeletePlaylist, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                        .addGap(7, 7, 7))))
            .addGroup(playlistLayout.createSequentialGroup()
                .addGroup(playlistLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(playlistLayout.createSequentialGroup()
                        .addGap(12, 12, 12)
                        .addComponent(lblPlaylists))
                    .addGroup(playlistLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(lblWhosPlaylist)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        playlistLayout.setVerticalGroup(
            playlistLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, playlistLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(lblPlaylists)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 244, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblWhosPlaylist)
                .addGap(7, 7, 7)
                .addComponent(lblPlaylistCountAndTime)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnPlaySelectedPlaylist)
                .addGap(7, 7, 7)
                .addGroup(playlistLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnNewPlaylist)
                    .addComponent(btnRenamePlaylist))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(playlistLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnDeletePlaylist)
                    .addComponent(tgglbtnChangePlaylistType))
                .addContainerGap())
        );

        javax.swing.GroupLayout playlistPanelLayout = new javax.swing.GroupLayout(playlistPanel);
        playlistPanel.setLayout(playlistPanelLayout);
        playlistPanelLayout.setHorizontalGroup(
            playlistPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(playlist, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        playlistPanelLayout.setVerticalGroup(
            playlistPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(playlist, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        tblplaylistTracks.setFont(new java.awt.Font("Dialog", 0, 15)); // NOI18N
        tblplaylistTracks.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        tblplaylistTracks.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_ALL_COLUMNS);
        tblplaylistTracks.setEditingColumn(0);
        tblplaylistTracks.setEditingRow(0);
        tblplaylistTracks.setFillsViewportHeight(true);
        tblplaylistTracks.setGridColor(new java.awt.Color(255, 255, 255));
        tblplaylistTracks.setRowHeight(20);
        tblplaylistTracks.setSelectionBackground(new java.awt.Color(0, 153, 153));
        tblplaylistTracks.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        tblplaylistTracks.setShowVerticalLines(false);
        tblplaylistTracks.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblplaylistTracksMouseClicked(evt);
            }
        });
        scroll.setViewportView(tblplaylistTracks);

        nowPlaying.setBackground(new java.awt.Color(0, 102, 102));

        javax.swing.GroupLayout nowPlayingLayout = new javax.swing.GroupLayout(nowPlaying);
        nowPlaying.setLayout(nowPlayingLayout);
        nowPlayingLayout.setHorizontalGroup(
            nowPlayingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 193, Short.MAX_VALUE)
        );
        nowPlayingLayout.setVerticalGroup(
            nowPlayingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        friends.setBackground(new java.awt.Color(0, 51, 51));

        javax.swing.GroupLayout friendsLayout = new javax.swing.GroupLayout(friends);
        friends.setLayout(friendsLayout);
        friendsLayout.setHorizontalGroup(
            friendsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 134, Short.MAX_VALUE)
        );
        friendsLayout.setVerticalGroup(
            friendsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(scroll)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(nowPlaying, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(friends, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(scroll)
            .addComponent(nowPlaying, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(friends, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(top, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(playlistPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addComponent(player, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(top, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(playlistPanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(player, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    private void setTitle() {
        this.setTitle(this.getTitle() + " - User: " + thisUser.getLName()
                + ", " + thisUser.getFName() + " - " + thisUser.getEmail());
    }

    private void addFriendsPlaylists() {
        //if user has any friends
        if (thisUser.friends != null) {
            //for each friend
            for (Account f : thisUser.getFriends()) {
                //if user's friend has any playlists
                if (f.playlists != null) {
                    //for each playlist of each friend
                    for (Playlist p : f.getPlaylists()) {
                        //add the playlist to the arraylist 
                        //  this user's playlists
                        thisUser.playlists.add(p);
                    }
                }
            }
        }
    }

    private void refreshPlaylistsList() {
        //clear model
        playlistsModel.setSize(0);
        //arraylist of current user and current user's friends' playlists
        ArrayList<Playlist> AllPlaylists = new ArrayList<>();
        thisUser.playlists = PlaylistLogic.getPlaylistsByAccID(thisUser.getAccountID());
        //add friends playlists to current user's playlists
        //add the playlists
        addFriendsPlaylists();
        AllPlaylists = thisUser.getPlaylists();

        if (AllPlaylists != null) {
            //index all the playlists
            lstPlist = PlaylistLogic.indexArrayListPlaylist(AllPlaylists);
            //for every playlist
            for (Playlist p : AllPlaylists) {
                //if playlist has at least one track
                if (p.tracks != null) {
                    //add playlist name and total time to list model
                    String listitem = "♫ " + p.getName() + "   -   " + PlaylistLogic.calculatePlaylistTotalTime(p);
                    playlistsModel.addElement(listitem);
                } else {
                    //playlist has no tracks so add name and time (zero) to model
                    String listitem = "♫ " + p.getName() + "   -   00:00";
                    playlistsModel.addElement(listitem);
                }
            }
            addPlaylistsToPopupMenu();
        }

    }

    class PlaylistMenuItem extends JMenuItem {

        //class to extend menu item so it can store a playlist
        //used to get the playlist to which to add a track
        //  when selected by right clicking a search result
        Playlist myPlaylist;

        public void setPlaylist(Playlist p) {
            myPlaylist = p;
        }

        public Playlist getPlaylist() {
            return myPlaylist;
        }
    }

    public void addPlaylistsToPopupMenu() {
        //if playlists are already listed on the menu, remove them
        if (menuAddTrackToPlaylist.getComponents() != null) {
            //menu has so remove
            menuAddTrackToPlaylist.removeAll();
        }
        if (thisUser.getPlaylists() != null) {
            for (Playlist p : thisUser.getPlaylists()) {
                //if playlist belongs to current user
                if (p.getOwner() == thisUser.getAccountID()) {
                    PlaylistMenuItem menuItem = new PlaylistMenuItem();
                    menuItem.setPlaylist(p);
                    PlaylistMenuActionListener listen = new PlaylistMenuActionListener();
                    menuItem.setText(menuItem.getPlaylist().getName());
                    menuItem.addActionListener(new PlaylistMenuActionListener());
                    menuAddTrackToPlaylist.add(menuItem);
                }
            }
        } else {
            JMenuItem menuItem = new JMenuItem("Create a playlist first");
            menuItem.setEnabled(false);
            menuAddTrackToPlaylist.add(menuItem);
        }
        //re-add the menu options
        popupTrackSelectedFromSearchResults.add(miAddTrackToNowPlayingFromSearch);
        popupTrackSelectedFromSearchResults.add(menuAddTrackToPlaylist);
    }

    private void repaintPlaylistButtons() {
        //reset all the buttons and label

        lblWhosPlaylist.setText("Playlist by: Me");
        btnRenamePlaylist.setEnabled(true);
        btnDeletePlaylist.setEnabled(true);
        tgglbtnChangePlaylistType.setEnabled(true);
        btnPlaySelectedPlaylist.setText("Play " + selectedPlaylist.getName().trim());
        //reset popup menu
        miDeleteTrackFromPlaylist.setEnabled(true);

        if (selectedPlaylist.getType() == 'p') {
            //private playlist so toggle button and set text
            tgglbtnChangePlaylistType.setSelected(false);
            tgglbtnChangePlaylistType.setText("Private");
        } else {
            //shared (public) playlist so set text and untoggle
            tgglbtnChangePlaylistType.setSelected(true);
            tgglbtnChangePlaylistType.setText("Shared");
        }
        if (selectedPlaylist.getOwner() != thisUser.getAccountID()) {
            //this is a shared playlist so disable buttons which could edit 
            //  someone else's playlist
            btnRenamePlaylist.setEnabled(false);
            btnDeletePlaylist.setEnabled(false);
            tgglbtnChangePlaylistType.setEnabled(false);
            //disable delete track from playlist popup menu item
            //  because you can't delete tracks from someone else's playlist
            miDeleteTrackFromPlaylist.setEnabled(false);
        }
        if (selectedPlaylist.tracks == null) {
            //playlist has no tracks so disable play button
            btnPlaySelectedPlaylist.setEnabled(false);
        } else {
            btnPlaySelectedPlaylist.setEnabled(true);
        }
    }

    private void updateLabels() {
        //update labels with name of playlist owner and track cound and playlist
        //  total time

        if (selectedPlaylist == null) {
            //user has no playlists
            lblWhosPlaylist.setText("No playlists to display");
            lblPlaylistCountAndTime.setText("");
            return;
        }
        String lblText = "Playlist by: ";

        if (selectedPlaylist.getOwner() != thisUser.getAccountID()) {
            //not current user's playlist
            lblText += PlaylistLogic.capitalizeFirstLetter(PlaylistLogic.getAccountByAccID(selectedPlaylist.getOwner()).getFName());
        } else {
            //my playlist
            lblText += "Me";
        }
        //set the playoist owner label
        lblWhosPlaylist.setText(lblText);
        //number of tracks in playlist
        if (selectedPlaylist.tracks != null) {
            //if playlist has tracks
            lblText = selectedPlaylist.getTracks().size() + " tracks, ";
        } else {
            //no tracks in playlist
            lblText = "No tracks in playlist.";
            lblPlaylistCountAndTime.setText(lblText);
            return;
        }
        //time of all tracks in playlist
        lblText += PlaylistLogic.calculatePlaylistTotalTime(selectedPlaylist) + " total";
        //set the track info label
        lblPlaylistCountAndTime.setText(lblText);
    }
    private void lstPlaylistsMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lstPlaylistsMousePressed
        // TODO add your handling code here:

    }//GEN-LAST:event_lstPlaylistsMousePressed

    private void lstPlaylistsValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_lstPlaylistsValueChanged
        if (lstPlaylists.getSelectedIndex() == -1) {
            return;
        }
        //get selected playlist object from indexed array of objects
        selectedPlaylist = lstPlist[lstPlaylists.getSelectedIndex()];
        //enable or disable relevant buttons
        repaintPlaylistButtons();
        //update info labels
        updateLabels();
        //reset table
        updateTableTracks();
    }//GEN-LAST:event_lstPlaylistsValueChanged

    private void logOutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_logOutActionPerformed
        //get rid of this
        this.dispose();
        //start again with login
        PlaylistGUI plookifyFrame = new PlaylistGUI();
        plookifyFrame.setVisible(true);
    }//GEN-LAST:event_logOutActionPerformed

    private void updateTableTracks() {
        //clear model
        trackmodel.setRowCount(0);
        //enable incase previously disabled
        tblplaylistTracks.setEnabled(true);
        //add tracks from selected playlist
        if (selectedPlaylist.tracks != null) {
            //index track objects in array
            tblTrax = PlaylistLogic.indexArrayListTrack(selectedPlaylist.tracks);
            //index to keep tracks of rows
            int indx = 0;
            for (Track t : selectedPlaylist.tracks) {
                //add data from the track object
                //also puts indx in the invisible column index
                trackmodel.addRow(new Object[]{indx, t.getTitle(), t.getArtist(),
                    t.getAlbum(), t.getGenre(), PlaylistLogic.formatSecondsToMinutes(t.getTime())});
                //increment indx for next row
                indx++;
            }
        } else {
            //playlist has no tracks so disable table to
            //  avoid null pointers if it's clicked on
            tblplaylistTracks.setEnabled(false);
            trackmodel.setNumRows(0);
        }
        hasSearched = false;
    }

    private void btnRenamePlaylistActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRenamePlaylistActionPerformed
        //rename playlist given input new name
        if (PlaylistLogic.renamePlaylist(selectedPlaylist, 
                JOptionPane.showInputDialog("Give '" + 
                        selectedPlaylist.getName() + "' a new name:"))) {
            refreshPlaylistsList();
        } else {
            PlaylistLogic.dialog("Could not rename playlist.");
        }
    }//GEN-LAST:event_btnRenamePlaylistActionPerformed

    private void tblplaylistTracksMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblplaylistTracksMouseClicked
        //track selected from playlist tracks table
        //get the row index by looking in the invisible column
        if (selectedPlaylist == null) {
            //user has no playlists to select
            return;
        }
        if (!tblplaylistTracks.isEnabled()) {
            //if the table is disabled don't try to do anything
            return;
        }
        if (tblplaylistTracks.getSelectedRowCount() < 1) {
            //if user has not selected a track yet
            return;
        }
        int selectedTrackIndex = Integer.parseInt(tblplaylistTracks.getModel().getValueAt(tblplaylistTracks.getSelectedRow(), 0).toString());
        if (selectedTrackIndex < 0) {
            //if something has gone wrong just ignore it
            return;
        }
        //pick track from indexed tracks and set as selected track
        selectedTrack = tblTrax[selectedTrackIndex];
        //update popup menu item with playlist name
        miDeleteTrackFromPlaylist.setText("Remove track from " + selectedPlaylist.getName());
    }//GEN-LAST:event_tblplaylistTracksMouseClicked

    private void tgglbtnChangePlaylistTypeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tgglbtnChangePlaylistTypeActionPerformed
        if (!PlaylistLogic.changePlaylistType(selectedPlaylist)) {
            PlaylistLogic.dialog("Could not change playlist type");
        }
        refreshPlaylistsList();
        repaintPlaylistButtons();

    }//GEN-LAST:event_tgglbtnChangePlaylistTypeActionPerformed

    private void btnNewPlaylistActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNewPlaylistActionPerformed
        String newPname = JOptionPane.showInputDialog("Name your new playlist:");
        if (newPname == null) {
            PlaylistLogic.dialog("Playlist name cannot be empty");
            return;
        }
        if (PlaylistLogic.createPlaylist(newPname, thisUser)) {
            refreshPlaylistsList();
        } else {
            PlaylistLogic.dialog("Could not create playlist.");
        }
    }//GEN-LAST:event_btnNewPlaylistActionPerformed

    class PlaylistMenuActionListener implements ActionListener {

        @Override
        public void actionPerformed(ActionEvent e) {
            if (selectedTrack == null) {
                return;
            }
            //get the source of the event
            Object source = e.getSource();
            //cast event source to correct type
            PlaylistMenuItem selectedMe = (PlaylistMenuItem) source;
            //get the playlist from the menu selection
            Playlist thePlaylist = selectedMe.getPlaylist();
            //add track to playlist
            PlaylistLogic.addNewTrackToPlaylist(thePlaylist, selectedTrack);
            refreshPlaylistsList();
        }
    }

    class RightClickPopupListener extends MouseAdapter {

        public void mousePressed(MouseEvent e) {
            if (tblplaylistTracks.getSelectedRowCount() < 1) {
                return;
            }
            if (tblplaylistTracks.isFocusOwner()) {
                showPopup(e);
            }
        }

        public void mouseReleased(MouseEvent e) {
            if (tblplaylistTracks.getSelectedRowCount() < 1) {
                return;
            }
            if (tblplaylistTracks.isFocusOwner()) {
                showPopup(e);
            }
        }

        private void showPopup(MouseEvent e) {
            if (tblplaylistTracks.getSelectedRowCount() < 1) {
                return;
            }
            if (e.isPopupTrigger()) {
                if (hasSearched) {
                    //show search results menu
                    popupTrackSelectedFromSearchResults.show(e.getComponent(),
                            e.getX(), e.getY());
                } else {
                    //show playlist popup
                    popupTrackSelectedFromPlaylist.show(e.getComponent(),
                            e.getX(), e.getY());
                }
            }
        }
    }

    private void miDeleteTrackFromPlaylistActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miDeleteTrackFromPlaylistActionPerformed
        PlaylistLogic.removeTrackFromPlaylist(selectedPlaylist, selectedTrack);
        updateTableTracks();
        refreshPlaylistsList();
    }//GEN-LAST:event_miDeleteTrackFromPlaylistActionPerformed

    private void miAddTrackToNowPlayingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miAddTrackToNowPlayingActionPerformed
        ArrayList<Track> toNowPlaying = new ArrayList<>();
        toNowPlaying.add(selectedTrack);
        PlaylistLogic.sendTracksToNowPlaying(toNowPlaying);
    }//GEN-LAST:event_miAddTrackToNowPlayingActionPerformed

    private void btnPlaySelectedPlaylistActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPlaySelectedPlaylistActionPerformed

        ArrayList<Track> toNowPlaying = new ArrayList<>();
        for (Track t : selectedPlaylist.tracks) {
            toNowPlaying.add(t);
        }
        PlaylistLogic.sendTracksToNowPlaying(toNowPlaying);
    }//GEN-LAST:event_btnPlaySelectedPlaylistActionPerformed

    private void btnDeletePlaylistActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeletePlaylistActionPerformed

        if (JOptionPane.showConfirmDialog(null, "Are you sure you want to delete playlist " + selectedPlaylist.getName() + "?",
                "Delete playlist?", JOptionPane.YES_NO_OPTION) > 0) {
            return;
        } else if (PlaylistLogic.deletePlaylist(selectedPlaylist)) {
            thisUser.playlists.remove(selectedPlaylist);
            refreshPlaylistsList();
            try {
                lstPlaylists.setSelectedIndex(0);
            } catch (Exception e) {
                selectedPlaylist = null;
            }
            updateLabels();
        } else {
            PlaylistLogic.dialog("Can't delete playlist.");
        }
    }//GEN-LAST:event_btnDeletePlaylistActionPerformed

    private void searchResultsToTrackTable(ArrayList<Track> searchResults) {
        //clear model
        trackmodel.setRowCount(0);
        //enable incase previously disabled
        tblplaylistTracks.setEnabled(true);
        //add tracks from search results
        if (searchResults != null) {
            //index track objects in array
            tblTrax = PlaylistLogic.indexArrayListTrack(searchResults);
            //index to keep tracks of rows
            int indx = 0;
            for (Track t : searchResults) {
                //add data from the track object
                //also puts indx in the invisible column index
                trackmodel.addRow(new Object[]{indx, t.getTitle(), t.getArtist(),
                    t.getAlbum(), t.getGenre(), PlaylistLogic.formatSecondsToMinutes(t.getTime())});
                //increment indx for next row
                indx++;
            }
            //set search results flag to true to help decide which popup menu
            hasSearched = true;
        } else {
            //no search results so inform user and reset table
            tblplaylistTracks.setEnabled(false);
            PlaylistLogic.dialog("No results");
            updateTableTracks();
        }
    }

    private void btnSearchByArtistActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchByArtistActionPerformed
        if (txtSearchArtist.getText().length() < 1) {
            PlaylistLogic.dialog("Enter a search term");
            return;
        }
        String fromSearchBox = txtSearchArtist.getText();
        searchResultsToTrackTable(PlaylistLogic.searchTrackByArtist(fromSearchBox));

    }//GEN-LAST:event_btnSearchByArtistActionPerformed

    private void lstPlaylistsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lstPlaylistsMouseClicked
        //for when user clicks back onto already selcted playlist
        //otherwise by list selection changed event
        if (!lstPlaylists.isSelectionEmpty()) {
            //as long as some playlist is selected, show 
            //  playlist tracks on table
            updateTableTracks();
            hasSearched = false;
        }
    }//GEN-LAST:event_lstPlaylistsMouseClicked

    private void txtSearchArtistFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtSearchArtistFocusGained
        txtSearchArtist.setSelectionStart(0);
        if (txtSearchArtist.getText() != null) {
            txtSearchArtist.setSelectionEnd(txtSearchArtist.getText().length());
        }
    }//GEN-LAST:event_txtSearchArtistFocusGained

    private void txtSearchArtistActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtSearchArtistActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtSearchArtistActionPerformed

    private void miAddTrackToNowPlayingFromSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miAddTrackToNowPlayingFromSearchActionPerformed
        ArrayList<Track> toNowPlaying = new ArrayList<>();
        toNowPlaying.add(selectedTrack);
        PlaylistLogic.sendTracksToNowPlaying(toNowPlaying);
    }//GEN-LAST:event_miAddTrackToNowPlayingFromSearchActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(PlaylistGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(PlaylistGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(PlaylistGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(PlaylistGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                PlaylistGUI plookifyFrame = new PlaylistGUI();
                plookifyFrame.setVisible(true);
                plookifyFrame.setTitle("Plookify - Playlist manager stand-alone operation");
                plookifyFrame.setTitle();
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnDeletePlaylist;
    private javax.swing.JButton btnNewPlaylist;
    private javax.swing.JButton btnPlaySelectedPlaylist;
    private javax.swing.JButton btnRenamePlaylist;
    private javax.swing.JButton btnSearchByArtist;
    private javax.swing.JPanel friends;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lblPlaylistCountAndTime;
    private javax.swing.JLabel lblPlaylists;
    private javax.swing.JLabel lblWhosPlaylist;
    private javax.swing.JButton logOut;
    private javax.swing.JList lstPlaylists;
    private javax.swing.JMenu menuAddTrackToPlaylist;
    private javax.swing.JMenuItem miAddTrackToNowPlaying;
    private javax.swing.JMenuItem miAddTrackToNowPlayingFromSearch;
    private javax.swing.JMenuItem miDeleteTrackFromPlaylist;
    private javax.swing.JPanel nowPlaying;
    private javax.swing.JPanel player;
    private javax.swing.JPanel playlist;
    private javax.swing.JPanel playlistPanel;
    private javax.swing.JPopupMenu popupTrackSelectedFromPlaylist;
    private javax.swing.JPopupMenu popupTrackSelectedFromSearchResults;
    private javax.swing.JScrollPane scroll;
    private javax.swing.JTable tblplaylistTracks;
    private javax.swing.JToggleButton tgglbtnChangePlaylistType;
    private javax.swing.JPanel top;
    private javax.swing.JTextField txtSearchArtist;
    // End of variables declaration//GEN-END:variables
}
