/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Social.Social_Manager_Code;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.Statement;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Sofia
 */
public class removeFriend extends javax.swing.JFrame {

    /**
     * Creates new form removeFriend
     */
    public removeFriend() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        table_remove = new javax.swing.JTable();
        Button_remove = new javax.swing.JButton();
        Button_cancel = new javax.swing.JButton();
        Button_refresh = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jLabel1.setText("Remove Friends ");

        table_remove.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Friend Name", "Select"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Boolean.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane1.setViewportView(table_remove);
        if (table_remove.getColumnModel().getColumnCount() > 0) {
            table_remove.getColumnModel().getColumn(1).setMinWidth(60);
            table_remove.getColumnModel().getColumn(1).setPreferredWidth(60);
            table_remove.getColumnModel().getColumn(1).setMaxWidth(60);
        }

        Button_remove.setText("Remove");
        Button_remove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Button_removeActionPerformed(evt);
            }
        });

        Button_cancel.setText("Cancel");
        Button_cancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Button_cancelActionPerformed(evt);
            }
        });

        Button_refresh.setText("Refresh");
        Button_refresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Button_refreshActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(72, 72, 72)
                        .addComponent(Button_remove)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 12, Short.MAX_VALUE)
                        .addComponent(Button_cancel, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(Button_refresh))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(Button_refresh, javax.swing.GroupLayout.Alignment.TRAILING))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 328, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Button_remove)
                    .addComponent(Button_cancel))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    
    
    
    
    
    
    
    public static int count = 0;
//************************************** THIS NOW WORKS....LEAVE IT ALONE ************************************** //   
    public void noRows(){
        Connection conn = SocialManagerSearch.connectDatabase();
        System.out.println("noRows : Database has opened successfully");
        Statement s = null;
        ResultSet r = null;
        try{   
            s = conn.createStatement();
            r = s.executeQuery("SELECT COUNT(*) AS rowid FROM FriendConfirmed");
            r.next();
            count = r.getInt("rowid");

            System.out.println("My confirmed friends table has " + count + " row(s).");


            count = count + 1;
            r.close();
            s.close();
        }
        catch(Exception t) {
            JOptionPane.showMessageDialog(null, "noRow friends update " + t);
            t.printStackTrace();
        }
        finally{
            try{
                conn.close();
                System.out.println("noRows friends connection closed");
            } 
            catch (Exception t) {
                JOptionPane.showMessageDialog(null, "Row friends update " + t);
                t.printStackTrace();
            }
        }
        
    }
    
    
    public static int noRemove = 0;

    private void Button_removeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Button_removeActionPerformed
      
        for (int i = 0; i < table_remove.getRowCount(); i++) {
            boolean isChecked = (Boolean) table_remove.getValueAt(i, 1);
            
           // System.out.println(isChecked);
           // System.out.println(FriendRequestName[i]);
            
            if (isChecked == true) {
                //Messages a = new Messages();
                noRows();
                noRemove = noRemove + 1;
                
                //add friend if confirmed to friendConfirmed table in database
                JOptionPane.showMessageDialog(null, "it gets here " + isChecked);
                JOptionPane.showMessageDialog(null, confirmedFriendID[i]);

                //JOptionPane.showMessageDialog(null, "and they are " + Table_messages.getValueAt(i, 1));

               // removeFriends[noRemove -1] = ofFriendName[i];
                String query = "delete from FriendConfirmed where userID =? and friendID =?";
                
                Connection conn = SocialManagerSearch.connectDatabase();
                System.out.println("Button_removeActionPerformed : Database has opened successfully");

                try {    
                    PreparedStatement removing = conn.prepareStatement(query);
                //NEED TO GET THE FRIEND NAME AND USER NAME TO INSERT INTO FRIEND CONFIRMED TABLE
                    
                    removing.setString(1, confirmedUserID[i]);
                    removing.setString(2, confirmedFriendID[i]);

                    removing.executeUpdate();

                    try {   
                        conn.commit();
                        //JOptionPane.showMessageDialog(null, "Private message sent to " + name);
                        JOptionPane.showMessageDialog(null, "The friend should be removed and updated");
                        //deleteRequest[i] = FriendRequestName[i];
                        //deleteUserRequest[i] = userFirstName;
                    } 
                    catch (Exception t) {
                        JOptionPane.showMessageDialog(null, "friend removed update " + t);
                        t.printStackTrace();
                    }
                    finally{
                        try{
                            removing.close();
                        } 
                        catch (Exception y) {
                            JOptionPane.showMessageDialog(null, ("friend removed commit error" + y));
                        }
                    }
                } 
                catch (Exception g) { //Insert error code for duplicate friend requests if a request has already been sent to the friend

                    JOptionPane.showMessageDialog(null, ("friend removed error" + g));
                }
                finally{
                    try{
                        conn.close();
                        System.out.println("Button_removeActionPerformed connection closed");
        //                removeFriends();
                      //  socialManagerPanel updating = new socialManagerPanel();
                      //  updating.getMessages();
                    } 
                    catch (Exception t) {
                        JOptionPane.showMessageDialog(null, "friend removed error again " + t);
                        t.printStackTrace();
                    }
                }
            }
            else{
                JOptionPane.showMessageDialog(null, "it gets here " + isChecked);
            }
        }

                                                 
   
     
        
    }//GEN-LAST:event_Button_removeActionPerformed

    public static int noFriends = 0;
    public static int noMessagesANDone = 100;
    public static String[] confirmedFriendID = new String[noMessagesANDone];
    public static String[] confirmedUserID = new String[noMessagesANDone];
    
    public void getFriendsUpdated(){
        noFriends = 0;
        String qry = "select * from FriendConfirmed"; //gets the friends from the database
        Connection conn = SocialManagerSearch.connectDatabase();
        System.out.println("getFriendsUpdated : Database has opened successfully");
        try {
            PreparedStatement pst = conn.prepareStatement(qry);
            ResultSet rs = pst.executeQuery();
            
            while (rs.next()) {
                noFriends = noFriends + 1;
                
                String userID = rs.getString("userID");
                String friendID = rs.getString("friendID");

                System.out.println("Your Name : " + userID);
                System.out.println("FriendID : " + friendID);
                

                System.out.println();
                //noMessagesANDone = noMessagesANDone + 1; // array will continue rising to keep space for over 100 friend requests
                
                if(userID.equals(userSignedInName)){ 
                    System.out.println(userID + " is friends with : " + friendID);
                    confirmedFriendID[noFriends -1] = friendID; //the position in the array is now set to the first message  
                    confirmedUserID[noFriends -1] = userID;
                }
            }
            pst.close();
            rs.close();
        }
        catch(Exception e){
            JOptionPane.showMessageDialog(null, "getFriendsUpdated " + e);
            e.printStackTrace();
        }
        finally{
            try{
                conn.close();
                System.out.println("getFriendsUpdated connection closed");
                //sendMessages(noFriends,confirmedFriendID,ofFriendName);
            } 
            catch (Exception q) {
            JOptionPane.showMessageDialog(null, "Become getFriendsUpdated " + q);
            q.printStackTrace();
            }
        }    
        //System.out.println("one : " + confirmedFriendID[0]);
        //System.out.println("two : " + confirmedFriendID[1]);
    } 
    
    private void Button_refreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Button_refreshActionPerformed
        getFriendsUpdated();
        DefaultTableModel model = (DefaultTableModel) table_remove.getModel();
        //model.setRowCount(0);
        try{
            model.setRowCount(0);
            for(int m = 1; m <= noFriends; m++){            
                model.addRow(new Object[]{confirmedFriendID[m-1],Boolean.FALSE});//need to change code to allow refresh to only display the messages that are not responded to           
            }
        }     
        catch(Exception e){
            JOptionPane.showMessageDialog(null, "get refreshed remove update " + e);
            e.printStackTrace();
        }  
    }//GEN-LAST:event_Button_refreshActionPerformed

    private void Button_cancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Button_cancelActionPerformed
        dispose();
    }//GEN-LAST:event_Button_cancelActionPerformed
//
//    public static int counts = 0;
////************************************** THIS NOW WORKS....LEAVE IT ALONE ************************************** //    
//    public void DeleteRows(){
//        Connection conn = SocialManagerSearch.connectDatabase();
//        System.out.println("DeleteRows : Database has opened successfully");
//        Statement s = null;
//        ResultSet r = null;
//        try{   
//            s = conn.createStatement();
//            r = s.executeQuery("SELECT COUNT(*) AS rowid FROM Friends");
//            r.next();
//            counts = r.getInt("rowid");
//
//            System.out.println("My friends table has " + counts + " row(s) it can delete.");
//
//
//            counts = counts + 1;
//            r.close();
//            s.close();
//        }
//        catch(Exception t) {
//            JOptionPane.showMessageDialog(null, "deleteRow friends update " + t);
//            t.printStackTrace();
//        }
//        finally{
//            try{
//                conn.close();
//                System.out.println("deleteRows friends connection closed");
//            } 
//            catch (Exception t) {
//                JOptionPane.showMessageDialog(null, "delete Row friends update " + t);
//                t.printStackTrace();
//            }
//        }
//        
//    }
////************************************** THIS NOW WORKS....LEAVE IT ALONE ************************************** //
//    public void removeFriends(){
//        JOptionPane.showMessageDialog(null, "Should delete now");
//        DeleteRows();
//        Connection conn = SocialManagerSearch.connectDatabase();
//        System.out.println("removeFriends : Database has opened successfully");
//        
//        
//            String query = "delete from Friends where accountID =? and friendID = ? ";
//
//            int i = 0;
//            try {    
//                PreparedStatement deleting = conn.prepareStatement(query);
//            //NEED TO GET THE FRIEND NAME AND USER NAME TO INSERT INTO FRIEND CONFIRMED TABLE
//               // for (int i = 0; i < counts; i++) {
//                    deleting.setString(1, removeFriends[i]);
//                    deleting.setString(2, userFirstName);
//
//                    deleting.executeUpdate();
//
//                    try {   
//                        conn.commit();
//                        //JOptionPane.showMessageDialog(null, "Private message sent to " + name);
//                        JOptionPane.showMessageDialog(null, removeFriends[i] + " : The request should be deleted");
//                        i = i + 1;
//                    } 
//                    catch (Exception t) {
//                        JOptionPane.showMessageDialog(null, "friend request deleted commit error " + t);
//                        t.printStackTrace();
//                    }
//                    finally{
//                        try{
//                            deleting.close();
//                        } 
//                        catch (Exception y) {
//                            JOptionPane.showMessageDialog(null, ("friend request deleted error 1 " + y));
//                        }
//                    }
//              //  }//END for statement
//
//            } 
//            catch (Exception g) { //Insert error code for duplicate friend requests if a request has already been sent to the friend
//
//                JOptionPane.showMessageDialog(null, ("!!!!!!!!!Friend request deleted error " + g));
//            }
//            finally{
//                try{
//                    conn.close();
//                    System.out.println("removeFriends connection closed");
//                    
//                } 
//                catch (Exception t) {
//                    JOptionPane.showMessageDialog(null, "friend delete error again " + t);
//                    t.printStackTrace();
//                }
//            }
//    }  




public static String userSignedInName = "";
    /**
     * @param args the command line arguments
     */
    public static void main(String userFirstName ) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(removeFriend.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(removeFriend.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(removeFriend.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(removeFriend.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        userSignedInName = userFirstName;
        
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new removeFriend().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Button_cancel;
    private javax.swing.JButton Button_refresh;
    private javax.swing.JButton Button_remove;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable table_remove;
    // End of variables declaration//GEN-END:variables
}
